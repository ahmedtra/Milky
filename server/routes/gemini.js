const express = require('express');
const router = express.Router();
const geminiService = require('../services/geminiService');
const auth = require('../middleware/auth');
const MealPlan = require('../models/MealPlan');

// Chat with dietitian
router.post('/chat', auth, async (req, res) => {
  try {
    const { message, conversationHistory = [] } = req.body;
    
    if (!message) {
      return res.status(400).json({ message: 'Message is required' });
    }

    // Try to fetch the user's active meal plan
    let activeMealPlan = null;
    try {
      // First try to find an explicitly active meal plan
      activeMealPlan = await MealPlan.findOne({
        userId: req.user._id,
        status: 'active'
      }).sort({ createdAt: -1 });

      // If no active meal plan, get the most recent one regardless of status
      if (!activeMealPlan) {
        activeMealPlan = await MealPlan.findOne({
          userId: req.user._id
        }).sort({ createdAt: -1 });
      }

      if (activeMealPlan) {
        console.log(`📋 Found meal plan for chat context: "${activeMealPlan.title}" (Status: ${activeMealPlan.status})`);
      } else {
        console.log('📋 No meal plan found for chat context');
      }
    } catch (err) {
      console.log('❌ Could not fetch meal plan for chat context:', err.message);
    }

    const response = await geminiService.chatWithDietitian(
      message, 
      conversationHistory,
      activeMealPlan,
      req.user
    );
    
    res.json({
      message: response,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error in dietitian chat:', error);
    res.status(500).json({ 
      message: error.message || 'Failed to get dietitian response',
      error: process.env.NODE_ENV === 'development' ? error.stack : undefined
    });
  }
});

// Generate meal plan
router.post('/generate-meal-plan', auth, async (req, res) => {
  try {
    const { duration = 7, preferences } = req.body;
    
    if (!preferences) {
      return res.status(400).json({ message: 'User preferences are required' });
    }

    // Generate meal plan using Gemini AI
    const aiMealPlan = await geminiService.generateMealPlan(preferences, duration);
    
    // Calculate start and end dates
    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(startDate.getDate() + duration - 1);

    // Sanitize meal plan data to ensure it meets schema requirements
    const sanitizedDays = (aiMealPlan.days || []).map(day => ({
      ...day,
      meals: day.meals.map(meal => ({
        ...meal,
        recipes: meal.recipes.map(recipe => ({
          ...recipe,
          ingredients: recipe.ingredients.map(ing => ({
            ...ing,
            unit: ing.unit || 'unit', // Default to 'unit' if missing
            category: ['protein', 'vegetable', 'fruit', 'grain', 'dairy', 'fat', 'spice', 'nut', 'seed', 'other'].includes(ing.category) 
              ? ing.category 
              : 'other' // Default to 'other' if invalid category
          }))
        }))
      }))
    }));

    // Create and save meal plan document to MongoDB
    const mealPlan = new MealPlan({
      userId: req.user._id,
      title: aiMealPlan.title || `AI Generated Meal Plan - ${duration} days`,
      description: aiMealPlan.description || 'Generated by AI based on your preferences',
      startDate,
      endDate,
      days: sanitizedDays,
      generatedBy: 'gemini-ai',
      status: 'draft'
    });

    await mealPlan.save();
    console.log(`✅ Saved meal plan to database: ${mealPlan._id} - "${mealPlan.title}"`);

    res.json({
      mealPlan,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error generating meal plan:', error);
    res.status(500).json({ message: 'Failed to generate meal plan' });
  }
});

// Get recipe suggestion
router.post('/recipe-suggestion', auth, async (req, res) => {
  try {
    const { ingredients, dietType, mealType } = req.body;
    
    if (!ingredients || !Array.isArray(ingredients) || ingredients.length === 0) {
      return res.status(400).json({ message: 'Ingredients array is required' });
    }

    if (!dietType) {
      return res.status(400).json({ message: 'Diet type is required' });
    }

    if (!mealType) {
      return res.status(400).json({ message: 'Meal type is required' });
    }

    const recipe = await geminiService.getRecipeSuggestion(ingredients, dietType, mealType);
    
    res.json({
      recipe,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error getting recipe suggestion:', error);
    res.status(500).json({ message: 'Failed to get recipe suggestion' });
  }
});

// Generate shopping list from meal plan
router.post('/generate-shopping-list', auth, async (req, res) => {
  try {
    const { mealPlan } = req.body;
    
    if (!mealPlan) {
      return res.status(400).json({ message: 'Meal plan is required' });
    }

    const shoppingList = await geminiService.generateShoppingList(mealPlan);
    
    res.json({
      shoppingList,
      generatedAt: new Date().toISOString()
    });
  } catch (error) {
    console.error('Error generating shopping list:', error);
    res.status(500).json({ message: 'Failed to generate shopping list' });
  }
});

module.exports = router;

