const express = require('express');
const router = express.Router();
const MealPlan = require('../models/MealPlan');
const ShoppingList = require('../models/ShoppingList');
const geminiService = require('../services/geminiService');
const auth = require('../middleware/auth');

// Get all meal plans for user
router.get('/', auth, async (req, res) => {
  try {
    const { status, page = 1, limit = 10 } = req.query;
    
    const query = { userId: req.user._id };
    if (status) {
      query.status = status;
    }

    const mealPlans = await MealPlan.find(query)
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit)
      .populate('userId', 'username email');

    const total = await MealPlan.countDocuments(query);

    res.json({
      mealPlans,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total
    });
  } catch (error) {
    console.error('Get meal plans error:', error);
    res.status(500).json({ message: 'Server error fetching meal plans' });
  }
});

// Get specific meal plan
router.get('/:id', auth, async (req, res) => {
  try {
    const mealPlan = await MealPlan.findOne({
      _id: req.params.id,
      userId: req.user._id
    }).populate('userId', 'username email');

    if (!mealPlan) {
      return res.status(404).json({ message: 'Meal plan not found' });
    }

    res.json({ mealPlan });
  } catch (error) {
    console.error('Get meal plan error:', error);
    res.status(500).json({ message: 'Server error fetching meal plan' });
  }
});

// Create new meal plan
router.post('/', auth, async (req, res) => {
  try {
    const { title, description, startDate, endDate, days, generatedBy = 'manual' } = req.body;

    if (!title || !startDate || !endDate) {
      return res.status(400).json({ 
        message: 'Title, start date, and end date are required' 
      });
    }

    const mealPlan = new MealPlan({
      userId: req.user._id,
      title,
      description,
      startDate: new Date(startDate),
      endDate: new Date(endDate),
      days: days || [],
      generatedBy,
      status: 'draft'
    });

    await mealPlan.save();

    res.status(201).json({
      message: 'Meal plan created successfully',
      mealPlan
    });
  } catch (error) {
    console.error('Create meal plan error:', error);
    res.status(500).json({ message: 'Server error creating meal plan' });
  }
});

// Generate meal plan with AI
router.post('/generate', auth, async (req, res) => {
  try {
    const { duration = 7, preferences } = req.body;

    if (!preferences) {
      return res.status(400).json({ message: 'User preferences are required' });
    }

    // Generate meal plan using Gemini AI
    const aiMealPlan = await geminiService.generateMealPlan(preferences, duration);
    
    // Calculate start and end dates
    const startDate = new Date();
    const endDate = new Date();
    endDate.setDate(startDate.getDate() + duration - 1);

    // Create meal plan document
    const mealPlan = new MealPlan({
      userId: req.user._id,
      title: aiMealPlan.title || `AI Generated Meal Plan - ${duration} days`,
      description: aiMealPlan.description || 'Generated by AI based on your preferences',
      startDate,
      endDate,
      days: aiMealPlan.days || [],
      generatedBy: 'gemini-ai',
      status: 'draft'
    });

    await mealPlan.save();

    res.status(201).json({
      message: 'AI meal plan generated successfully',
      mealPlan
    });
  } catch (error) {
    console.error('Generate meal plan error:', error);
    res.status(500).json({ message: 'Failed to generate meal plan' });
  }
});

// Update meal plan
router.put('/:id', auth, async (req, res) => {
  try {
    const { title, description, days, status } = req.body;

    const mealPlan = await MealPlan.findOne({
      _id: req.params.id,
      userId: req.user._id
    });

    if (!mealPlan) {
      return res.status(404).json({ message: 'Meal plan not found' });
    }

    if (title) mealPlan.title = title;
    if (description) mealPlan.description = description;
    if (days) mealPlan.days = days;
    if (status) mealPlan.status = status;

    await mealPlan.save();

    res.json({
      message: 'Meal plan updated successfully',
      mealPlan
    });
  } catch (error) {
    console.error('Update meal plan error:', error);
    res.status(500).json({ message: 'Server error updating meal plan' });
  }
});

// Activate meal plan
router.post('/:id/activate', auth, async (req, res) => {
  try {
    const mealPlan = await MealPlan.findOne({
      _id: req.params.id,
      userId: req.user._id
    });

    if (!mealPlan) {
      return res.status(404).json({ message: 'Meal plan not found' });
    }

    // Deactivate other active meal plans
    await MealPlan.updateMany(
      { userId: req.user._id, status: 'active' },
      { status: 'archived' }
    );

    // Activate this meal plan
    mealPlan.status = 'active';
    await mealPlan.save();

    res.json({
      message: 'Meal plan activated successfully',
      mealPlan
    });
  } catch (error) {
    console.error('Activate meal plan error:', error);
    res.status(500).json({ message: 'Server error activating meal plan' });
  }
});

// Delete meal plan
router.delete('/:id', auth, async (req, res) => {
  try {
    const mealPlan = await MealPlan.findOne({
      _id: req.params.id,
      userId: req.user._id
    });

    if (!mealPlan) {
      return res.status(404).json({ message: 'Meal plan not found' });
    }

    // Also delete associated shopping lists
    await ShoppingList.deleteMany({ mealPlanId: mealPlan._id });

    await MealPlan.findByIdAndDelete(mealPlan._id);

    res.json({ message: 'Meal plan deleted successfully' });
  } catch (error) {
    console.error('Delete meal plan error:', error);
    res.status(500).json({ message: 'Server error deleting meal plan' });
  }
});

// Get today's meals
router.get('/today/meals', auth, async (req, res) => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const mealPlan = await MealPlan.findOne({
      userId: req.user._id,
      status: 'active',
      startDate: { $lte: today },
      endDate: { $gte: today }
    });

    if (!mealPlan) {
      return res.json({ meals: [], message: 'No active meal plan for today' });
    }

    const todayString = today.toISOString().split('T')[0];
    const todayMeals = mealPlan.days.find(day => 
      day.date.toISOString().split('T')[0] === todayString
    );

    res.json({
      meals: todayMeals ? todayMeals.meals : [],
      mealPlan: {
        id: mealPlan._id,
        title: mealPlan.title,
        description: mealPlan.description
      }
    });
  } catch (error) {
    console.error('Get today meals error:', error);
    res.status(500).json({ message: 'Server error fetching today meals' });
  }
});

// Generate shopping list for meal plan
router.post('/:id/shopping-list', auth, async (req, res) => {
  try {
    const mealPlan = await MealPlan.findOne({
      _id: req.params.id,
      userId: req.user._id
    });

    if (!mealPlan) {
      return res.status(404).json({ message: 'Meal plan not found' });
    }

    // Generate shopping list using AI
    const shoppingListData = await geminiService.generateShoppingList(mealPlan);

    // Create shopping list document
    const shoppingList = new ShoppingList({
      userId: req.user._id,
      mealPlanId: mealPlan._id,
      title: shoppingListData.title,
      description: shoppingListData.description,
      items: shoppingListData.items,
      status: 'draft',
      totalEstimatedCost: shoppingListData.totalEstimatedCost,
      store: shoppingListData.store
    });

    await shoppingList.save();

    res.status(201).json({
      message: 'Shopping list generated successfully',
      shoppingList
    });
  } catch (error) {
    console.error('Generate shopping list error:', error);
    res.status(500).json({ message: 'Failed to generate shopping list' });
  }
});

module.exports = router;

